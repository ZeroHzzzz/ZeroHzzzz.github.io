<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C++编译中变量重复定义问题</title>
    <link href="/2024/09/04/C++%E7%BC%96%E8%AF%91%E4%B8%AD%E5%8F%98%E9%87%8F%E9%87%8D%E5%A4%8D%E5%AE%9A%E4%B9%89%E9%97%AE%E9%A2%98/"/>
    <url>/2024/09/04/C++%E7%BC%96%E8%AF%91%E4%B8%AD%E5%8F%98%E9%87%8F%E9%87%8D%E5%A4%8D%E5%AE%9A%E4%B9%89%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="重复定义-Cpp-extern关键字"><a href="#重复定义-Cpp-extern关键字" class="headerlink" title="重复定义 #Cpp #extern关键字"></a>重复定义 #Cpp #extern关键字</h1><p>C++编译过程中出现变量重复定义问题非常常见，通常表现为以下报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[build] CMakeFiles\NewPlayer.<span class="hljs-built_in">dir</span>/objects.a(imagehandler.cpp.obj):C:/Users/ZeroHzzzz/Desktop/QT_new/src/NewPlayer/imagehandler.h:197: multiple definition of `speedlineLeft<span class="hljs-string">&#x27;</span><br><span class="hljs-string">[build] CMakeFiles\NewPlayer.dir/objects.a(datahandler.cpp.obj):C:/Users/ZeroHzzzz/Desktop/QT_new/src/NewPlayer/imagehandler.h:197: first defined here</span><br></code></pre></td></tr></table></figure><p>出现这种报错通常分为以下几种情况：</p><h3 id="全局变量重复定义"><a href="#全局变量重复定义" class="headerlink" title="全局变量重复定义"></a>全局变量重复定义</h3><p>在多个源文件中定义了相同的全局变量，而没有使用<code>extern</code>关键字声明。这会导致链接器在合并目标文件时发现多个相同的符号定义。</p><h3 id="头文件中的直接定义变量"><a href="#头文件中的直接定义变量" class="headerlink" title="头文件中的直接定义变量"></a>头文件中的直接定义变量</h3><p>在C或C++中，<strong>不要直接在头文件（.h 文件）中定义全局变量</strong>，因为这样做会导致在多个文件中包含同一个头文件时出现多次定义的问题（即“重复定义”错误）</p><p>在头文件中直接定义了变量或函数，这些头文件被多个源文件包含。每次包含都会生成该变量或函数的一个定义，最终在链接时产生冲突。我们通常的做法是在头文件中声明一个变量但是不去定义他，然后再cpp文件中定义变量。</p><p>错误案例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// myheader.h</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> MYHEADER_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MYHEADER_H</span><br><br><span class="hljs-type">int</span> myVar;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// MYHEADER_H</span></span><br><br><span class="hljs-comment">// mysource.cpp</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;myheader.h&quot;</span></span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> myVar = <span class="hljs-number">42</span>;  <span class="hljs-comment">// 定义变量</span><br></code></pre></td></tr></table></figure><p>正确做法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// myheader.h</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> MYHEADER_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MYHEADER_H</span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> myVar;  <span class="hljs-comment">// 仅声明，不定义</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// MYHEADER_H</span></span><br><br><span class="hljs-comment">// mysource.cpp</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;myheader.h&quot;</span></span><br><br><span class="hljs-type">int</span> myVar = <span class="hljs-number">42</span>;  <span class="hljs-comment">// 定义变量</span><br><br><span class="hljs-comment">// othersource.cpp</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;myheader.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printVar</span><span class="hljs-params">()</span> </span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;myVar: &quot;</span> &lt;&lt; myVar &lt;&lt; std::endl;  <span class="hljs-comment">// 使用变量</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h3><p>在头文件中定义了非静态的局部变量，如果这个头文件被多个源文件包含，也会导致重复定义问题。</p><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><h3 id="使用extern声明全局变量"><a href="#使用extern声明全局变量" class="headerlink" title="使用extern声明全局变量"></a>使用<code>extern</code>声明全局变量</h3><p>如果需要在多个文件中使用相同的全局变量，可以在一个源文件中定义变量，在其他源文件中使用<code>extern</code>关键字来声明。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 变量声明在header.h中</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> globalVar;<br><br><span class="hljs-comment">// 变量定义在main.cpp中</span><br><span class="hljs-type">int</span> globalVar = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><h3 id="头文件中使用inline或static关键字"><a href="#头文件中使用inline或static关键字" class="headerlink" title="头文件中使用inline或static关键字"></a>头文件中使用<code>inline</code>或<code>static</code>关键字</h3><p>如果头文件中有函数定义，可以使用<code>inline</code>关键字来避免重复定义。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// header.h</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 函数实现</span><br>&#125;<br></code></pre></td></tr></table></figure><p>对于需要在头文件中定义的局部变量，可以使用<code>static</code>关键字：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// header.h</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> localVar = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><h3 id="使用包含保护"><a href="#使用包含保护" class="headerlink" title="使用包含保护"></a>使用包含保护</h3><p>确保头文件有包含保护，防止同一个头文件被多次包含。可以通过<code>#ifndef</code>，<code>#define</code>，<code>#endif</code>来实现</p><p>[[C++编译中头文件重复包含问题]]</p><p>“包含保护”只是防止头文件被多次包含到<strong>同一个</strong>源文件中，它无法防止多个源文件中出现同样的变量定义</p><p>假设你在头文件中定义了一个全局变量：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// myheader.h</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> MYHEADER_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MYHEADER_H</span><br><br><span class="hljs-type">int</span> myVar = <span class="hljs-number">42</span>;  <span class="hljs-comment">// 在头文件中定义变量</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// MYHEADER_H</span></span><br></code></pre></td></tr></table></figure><p>然后有两个源文件<code>a.cpp</code>和<code>b.cpp</code>都包含了这个头文件，当你编译时，<code>a.cpp</code>和<code>b.cpp</code>都会各自包含并定义<code>myVar</code>，这意味着编译器会看到两个不同的文件中都有一个全局变量<code>myVar</code>的定义，从而导致<strong>重复定义</strong>错误。正确的做法是<strong>在头文件中声明变量</strong>，而<strong>在某个源文件中定义变量</strong>。</p><h3 id="使用命名空间"><a href="#使用命名空间" class="headerlink" title="使用命名空间"></a>使用命名空间</h3><p>将全局变量放入命名空间内，可以减少不同文件中相同变量名的冲突：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// header.h</span><br><span class="hljs-keyword">namespace</span> MyNamespace &#123;<br>    <span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> globalVar;<br>&#125;<br><br><span class="hljs-comment">// main.cpp</span><br><span class="hljs-type">int</span> MyNamespace::globalVar = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>#重复定义</tag>
      
      <tag>#Cpp</tag>
      
      <tag>#extern关键字</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++编译中头文件重复包含问题</title>
    <link href="/2024/09/01/C++%E7%BC%96%E8%AF%91%E4%B8%AD%E5%A4%B4%E6%96%87%E4%BB%B6%E9%87%8D%E5%A4%8D%E5%8C%85%E5%90%AB%E9%97%AE%E9%A2%98/"/>
    <url>/2024/09/01/C++%E7%BC%96%E8%AF%91%E4%B8%AD%E5%A4%B4%E6%96%87%E4%BB%B6%E9%87%8D%E5%A4%8D%E5%8C%85%E5%90%AB%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="Cpp-编译-头文件保护"><a href="#Cpp-编译-头文件保护" class="headerlink" title="Cpp #编译 #头文件保护"></a>Cpp #编译 #头文件保护</h1><p>在C++开发过程中，重定义错误是一个常见的问题。如果存在一个头文件被多个文件引用，而头文件没有防重复包含保护的情况，就会引发重定义的问题，表现如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[build] C:/Users/ZeroHzzzz/Desktop/QT/Player/image.h:106:7: error: redefinition of <span class="hljs-string">&#x27;class ImageHandler&#x27;</span><br>[build] class ImageHandler &#123; [build] ^~~~~~~~~~~~<br>[build] In file included from C:/Users/ZeroHzzzz/Desktop/QT/Player/datareader.h:3:0,<br>[build] from C:\Users\ZeroHzzzz\Desktop\QT\Player\mainwindow.h:4, [build] from C:\Users\ZeroHzzzz\Desktop\QT\Player\mainwindow.cpp:1:<br>[build] C:/Users/ZeroHzzzz/Desktop/QT/Player/image.h:106:7: note: previous definition of <span class="hljs-string">&#x27;class ImageHandler&#x27;</span><br>[build] class ImageHandler &#123;<br>[build] ^~~~~~~~~~~~<br>[build] In file included from C:/Users/ZeroHzzzz/Desktop/QT/Player/datareader.h:14:0,<br>[build] from C:\Users\ZeroHzzzz\Desktop\QT\Player\datareader.cpp:1:<br></code></pre></td></tr></table></figure><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="使用预处理指令-ifndef、-define-和-endif"><a href="#使用预处理指令-ifndef、-define-和-endif" class="headerlink" title="使用预处理指令 #ifndef、#define 和 #endif"></a>使用预处理指令 <code>#ifndef</code>、<code>#define</code> 和 <code>#endif</code></h3><p>在<code>image.h</code>头文件的开头和结尾添加如下的预处理指令：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// image.h 文件的开头</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> IMAGE_H    <span class="hljs-comment">// 检查是否定义了IMAGE_H宏</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_H    <span class="hljs-comment">// 定义IMAGE_H宏</span></span><br><br><span class="hljs-comment">// 类定义和其他代码</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ImageHandler</span> &#123;<br>    <span class="hljs-comment">// 类的成员和方法</span><br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// IMAGE_H  // 结束条件编译</span></span><br></code></pre></td></tr></table></figure><p><code>#ifndef IMAGE_H</code>：检查是否已经定义了<code>IMAGE_H</code>宏，如果没有定义，则继续执行下面的代码。<br><code>#define IMAGE_H</code>：定义<code>IMAGE_H</code>宏，用于标记该头文件已经被包含。这确保了即使<code>image.h</code>被多次包含，<code>ImageHandler</code>类也只会被定义一次。<br><code>#endif</code>：结束条件编译</p><p><code>#ifndef</code>的方式依赖于宏名字不能冲突，这不光可以保证同一个文件不会被包含多次，也能保证内容完全相同的两个文件不会被不小心同时包含。当然，缺点就是如果不同头文件的宏名不小心“撞车”，可能就会导致头文件明明存在，编译器却硬说找不到声明的状况</p><h3 id="使用-pragma-once"><a href="#使用-pragma-once" class="headerlink" title="使用 #pragma once"></a>使用 <code>#pragma once</code></h3><p>在<code>image.h</code>文件的开头添加：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><br><span class="hljs-comment">// 类定义和其他代码</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ImageHandler</span> &#123;<br>    <span class="hljs-comment">// 类的成员和方法</span><br>&#125;;<br></code></pre></td></tr></table></figure><p><code>#pragma once</code>是一种编译器指令，指示编译器只包含一次该头文件。它的效果与使用<code>#ifndef</code>/<code>#define</code>保护符相同，但写法更简洁。这种方法更易于维护，但需要注意的是，<code>#pragma once</code>不是所有编译器都支持的标准，因此在一些特定的编译环境中可能需要退回到传统的防护符号方法。</p><p><code>#pragma once</code>由编译器提供保证：同一个文件不会被包含多次。注意这里所说的“同一个文件”是指<strong>物理</strong>上的一个文件，而不是指内容相同的两个文件。带来的好处是，你不必再费劲想个宏名了，当然也就不会出现宏名碰撞引发的奇怪问题。对应的缺点就是如果某个头文件有多份拷贝，本方法不能保证他们不被重复包含。当然，相比宏名碰撞引发的“找不到声明”的问题，重复包含更容易被发现并修正。</p><p>但是：</p><p><strong>你无法对一个头文件中的一段代码作pragma once声明，而只能针对文件。</strong></p><p>其好处是，你不必再担心宏名冲突了，当然也就不会出现宏名冲突引发的奇怪问题。大型项目的编译速度也因此提高了一些。</p><p>对应的缺点就是如果某个头文件有多份拷贝，这个方法不能保证他们不被重复包含。当然，相比宏名冲突引发的“找不到声明”的问题，这种重复包含很容易被发现并修正。</p><p>因此，对于可移植性方面而言，我更倾向于使用<code>#ifndef</code>的方法</p><h2 id="检查包含关系"><a href="#检查包含关系" class="headerlink" title="检查包含关系"></a>检查包含关系</h2><p>头文件的包含关系也需要注意。循环包含会导致难以定位的问题，影响程序的可维护性。</p><h3 id="使用编译器的预处理选项查看包含树"><a href="#使用编译器的预处理选项查看包含树" class="headerlink" title="使用编译器的预处理选项查看包含树"></a>使用编译器的预处理选项查看包含树</h3><p>许多编译器提供了查看包含文件树的选项，可以帮助你理解头文件的包含关系。</p><p>例如<code>gcc</code>或<code>g++</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">g++ -H main.cpp -o main<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">. main.cpp<br>.. image.h<br>... other_header.h<br>.. another_header.h<br></code></pre></td></tr></table></figure><h3 id="使用-CMake-的include-what-you-use工具"><a href="#使用-CMake-的include-what-you-use工具" class="headerlink" title="使用 [[CMake]] 的include-what-you-use工具"></a>使用 [[CMake]] 的<code>include-what-you-use</code>工具</h3><p><code>include-what-you-use</code>（IWYU）是一个专门分析C/C++代码的工具，可以帮助检测和优化头文件的包含情况。IWYU可以生成详细的报告，指出哪些头文件是多余的，哪些头文件是缺失的。</p><p><strong>使用方法</strong>：</p><ol><li>安装<code>include-what-you-use</code>工具。</li><li>在CMake项目中，将<code>CMAKE_CXX_INCLUDE_WHAT_YOU_USE</code>设置为<code>iwyu</code>的路径。</li></ol><p>在CMakeLists.txt中添加：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">set</span>(CMAKE_CXX_INCLUDE_WHAT_YOU_USE <span class="hljs-string">&quot;include-what-you-use&quot;</span>)<br></code></pre></td></tr></table></figure><p>然后，运行CMake和构建系统，会自动生成包含分析的报告。</p>]]></content>
    
    
    
    <tags>
      
      <tag>#Cpp</tag>
      
      <tag>#编译</tag>
      
      <tag>#头文件保护</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
